tm_shape(loco) +
tm_bubbles()
tm_shape(loco) +
tm_bubbles("cluster")
tm_shape(loco) +
tm_fill("cluster")
tm_shape(loco) +
tm_dots("cluster")
tm_shape(loco) +
tm_dot("cluster")
tm_shape(loco) +
tm_dot()
tm_shape(loco) +
tm_dots()
tm_shape(loco) +
tm_dots(size = 20)
tm_shape(loco) +
tm_dots(size = 10)
tm_shape(loco) +
tm_dots(size = 5)
tm_shape(loco) +
tm_dots(size = 2)
tm_shape(loco) +
tm_dots(size = 1)
tm_shape(loco) +
tm_dots(size = 1) +
tm_add_legend()
View(loco)
tm_shape(loco) +
tm_dots(size = 1) +
tm_add_legend("Cluster")
tm_shape(loco) +
tm_dots(size = 1) +
tm_symbols("Cluster")
tm_shape(loco) +
tm_dots(size = 1) +
tm_symbols("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="lightyellow2",
"cluster_4"="steelblue"))
tm_shape(loco) +
tm_dots(size = 1) +
tm_fill("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="lightyellow2",
"cluster_4"="steelblue"))
tm_shape(loco) +
tm_dots(size = 1) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="lightyellow2",
"cluster_4"="steelblue"))
tm_shape(loco) +
#tm_dots(size = 1) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="lightyellow2",
"cluster_4"="steelblue"))
tm_shape(loco) +
#tm_dots(size = 1) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="lightyellow2",
"cluster_4"="steelblue"), size = 1)
setwd("C:/Curso/Coberturas")
getwd()
getwd()
#install.packages("shapefiles")
loco <- st_read("Co_cuadricula_uw1.shp")
setwd("C:/Curso/Coberturas")
getwd()
#install.packages("shapefiles")
loco <- st_read("Co_cuadricula_uw1.shp")
library(geocmeans)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(spdep)
library(tmap)
library(sf)
library(shapefiles)
library(geocmeans)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(spdep)
library(tmap)
library(sf)
library(shapefiles)
loco <- st_read("Co_cuadricula_uw1.shp")
class(loco)
data <- loco
spdep::set.mcOption(FALSE)
spdep::set.coresOption(1L)
names(data)
AnalysisFields <-c("id","left","top","right","bottom")
View(data)
Data <- sf::st_drop_geometry(loco[AnalysisFields])
for (Col in names(Data)){
Data[[Col]] <- scale(Data[[Col]])
}
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
Df <- data.frame(K=2:10, R2 = R2s)
ggplot(Df)+
geom_line(aes(x=K,y=R2s), color="blue")+
geom_point(aes(x=K,y=R2s),color="red")+
xlab("Number of groups")+
ylab("R2 of classification")
KMeanClust <-  kmeans(Data,centers=4,iter.max = 150)
#LyonIris$Cluster <-paste("cluster",KMeanClust$cluster,sep="_")
loco$Cluster <-paste("cluster",KMeanClust$cluster,sep="_")
tm_shape(loco) +
#tm_dots(size = 1) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="lightyellow2",
"cluster_4"="steelblue"), size = 1)
tm_shape(loco) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue"), size = 1)
tm_shape(loco) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue"), size = 1) +
tm_layout(legend.outside = TRUE, frame = FALSE)
tm_shape(loco) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue"), size = 1)
tm_shape(loco) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue"), size = 1) +
tm_layout(legend.outside = TRUE, frame = FALSE)
Cmean <- CMeans(Data,4,1.5,500,standardize = FALSE, seed = 456, tol = 0.00001, verbose = FALSE)
calcqualityIndexes(Data, Cmean$Belongings, m = 1.5)
beta_values <- selectParameters("GFCM",data = Data, k = 4, m = 1.5,
beta = seq(0,1,0.05), spconsist = FALSE,
tol = 0.00001, seed = 456)
knitr::kable(beta_values[c("beta","Silhouette.index","XieBeni.index","Explained.inertia")],
col.names = c("beta", "silhouette index",
"Xie and Beni index", "explained inertia"),digits = 3)
GCmean <- GCMeans(Data,k = 4,m = 1.5, beta = 0.7,500,standardize = FALSE, seed=456,
tol = 0.00001, verbose = FALSE)
r1 <- calcqualityIndexes(Data,GCmean$Belongings,m=1.5)
r2 <- calcqualityIndexes(Data,Cmean$Belongings,m=1.5)
df <- cbind(unlist(r1), unlist(r2))
knitr::kable(df,
digits = 3,col.names = c("GFCM", "FCM"))
cmeansMaps<- mapClusters(loco,Cmean$Belongings,undecided = 0.45)
GcmeansMaps<- mapClusters(loco,GCmean$Belongings,undecided = 0.45)
tmap_arrange(cmeansMaps$ProbaMaps[[1]],GcmeansMaps$ProbaMaps[[1]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[2]],GcmeansMaps$ProbaMaps[[2]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[3]],GcmeansMaps$ProbaMaps[[3]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[4]],GcmeansMaps$ProbaMaps[[4]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ClusterPlot,GcmeansMaps$ClusterPlot, nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[1]],GcmeansMaps$ProbaMaps[[1]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[2]],GcmeansMaps$ProbaMaps[[2]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[3]],GcmeansMaps$ProbaMaps[[3]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ProbaMaps[[4]],GcmeansMaps$ProbaMaps[[4]], nrow = 1, ncol = 2)
tmap_arrange(cmeansMaps$ClusterPlot,GcmeansMaps$ClusterPlot, nrow = 1, ncol = 2)
Neighbours <- poly2nb(loco,queen = TRUE)
?poly2nb
Neighbours <- dnearneigh(loco,queen = TRUE)
Neighbours <- dnearneigh(loco)
Neighbours <- knn2nb(loco,queen = TRUE)
Neighbours <- knn2nb(loco)
Neighbours <- knn2nb(knearneigh(loco,queen = TRUE))
Neighbours <- knn2nb(knearneigh(loco))
Neighbours <- poly2nb(LyonIris,queen = TRUE)
Neighbours <- knn2nb(knearneigh(loco))
Neighbours <- knn2nb(knearneigh(loco))
WMat <- nb2listw(Neighbours,style="W",zero.policy = TRUE)
DFindices_SFCM <- selectParameters(algo = "SFCM", data = Data,
k = 4, m = 1.5, alpha = seq(0,2,0.05),
nblistw = WMat, standardize = FALSE,
tol = 0.0001, verbose = FALSE, seed = 456)
ggplot(DFindices_SFCM)+
geom_smooth(aes(x=alpha,y=spConsistency), color = "black")+
geom_point(aes(x=alpha,y=spConsistency), color = "red")
ggplot(DFindices_SFCM)+
geom_smooth(aes(x=alpha,y=Explained.inertia), color = "black")+
geom_point(aes(x=alpha,y=Explained.inertia), color = "red")
ggplot(DFindices_SFCM)+
geom_smooth(aes(x=alpha,y=Silhouette.index), color = "black")+
geom_point(aes(x=alpha,y=Silhouette.index), color = "red")
ggplot(DFindices_SFCM)+
geom_smooth(aes(x=alpha,y=XieBeni.index), color = "black")+
geom_point(aes(x=alpha,y=XieBeni.index), color = "red")
SFCM <- SFCMeans(Data, WMat, k = 4, m = 1.5, alpha = 0.7,
tol = 0.0001, standardize = FALSE,
verbose = FALSE, seed = 456)
future::plan(future::multisession(workers=2))
DFindices_SFGCM <- selectParameters.mc(algo = "SGFCM", data = Data,
k = 4, m = 1.5, alpha = seq(0,2,0.05),
beta = seq(0,0.85,0.05),
nblistw = WMat, standardize = FALSE, chunk_size = 50,
tol = 0.0001, verbose = FALSE, seed = 456)
ggplot(DFindices_SFGCM) +
geom_raster(aes(x = alpha, y = beta, fill = Silhouette.index),  size = 5) +
scale_fill_viridis() +
coord_fixed(ratio=1)
ggplot(DFindices_SFGCM) +
geom_raster(aes(x = alpha, y = beta, fill = XieBeni.index),  size = 5) +
scale_fill_viridis() +
coord_fixed(ratio=1)
ggplot(DFindices_SFGCM) +
geom_raster(aes(x = alpha, y = beta, fill = spConsistency),  size = 5) +
scale_fill_viridis() +
coord_fixed(ratio=1)
SGFCM <- SGFCMeans(Data,WMat,k = 4,m=1.5, alpha=0.95, beta = 0.65,
tol=0.0001, standardize = FALSE, verbose = FALSE, seed = 456)
r1 <- calcqualityIndexes(Data, SFCM$Belongings,m = 1.5)
r2 <- calcqualityIndexes(Data, SGFCM$Belongings,m = 1.5)
diagSFCM <- spatialDiag(SFCM$Belongings, nblistw = WMat,
undecided = 0.45,nrep = 500)
diagSGFCM <- spatialDiag(SGFCM$Belongings, nblistw = WMat,
undecided = 0.45,nrep = 500)
SGFCM <- SGFCMeans(Data,WMat,k = 4,m=1.5, alpha=0.95, beta = 0.65,
tol=0.0001, standardize = FALSE, verbose = FALSE, seed = 456)
r1 <- calcqualityIndexes(Data, SFCM$Belongings,m = 1.5)
r2 <- calcqualityIndexes(Data, SGFCM$Belongings,m = 1.5)
diagSFCM <- spatialDiag(SFCM$Belongings, nblistw = WMat,
undecided = 0.45,nrep = 500)
diagSGFCM <- spatialDiag(SGFCM$Belongings, nblistw = WMat,
undecided = 0.45,nrep = 500)
df <- cbind(
c(unlist(r1),diagSFCM$SpConsist),
c(unlist(r2),diagSGFCM$SpConsist)
)
row.names(df)[length(row.names(df))] <- "sp.consistency"
knitr::kable(df,digits = 3,col.names = c("SFCM","SGFCM"))
SFCMMaps <- mapClusters(geodata = loco, object = SFCM$Belongings,undecided = 0.45)
SGFCMMaps <- mapClusters(geodata = loco, object = SGFCM$Belongings,undecided = 0.45)
tmap_arrange(SFCMMaps$ProbaMaps[[1]],SGFCMMaps$ProbaMaps[[1]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[2]],SGFCMMaps$ProbaMaps[[2]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[3]],SGFCMMaps$ProbaMaps[[3]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[4]],SGFCMMaps$ProbaMaps[[4]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ClusterPlot,SGFCMMaps$ClusterPlot, nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ClusterPlot,SGFCMMaps$ClusterPlot, nrow = 1, ncol = 2)
SFCMMaps <- mapClusters(geodata = loco, object = SFCM$Belongings,undecided = 0.45)
SGFCMMaps <- mapClusters(geodata = loco, object = SGFCM$Belongings,undecided = 0.45)
tmap_arrange(SFCMMaps$ClusterPlot,SGFCMMaps$ClusterPlot, nrow = 1, ncol = 2)
View(SFCMMaps)
View(SFCMMaps)
View(SFCMMaps$ProbaMaps)
View(SFCMMaps$ClusterPlot)
View(SFCMMaps@data)
View(SFCMMaps)
View(SGFCMMaps$ProbaMaps)
View(SGFCMMaps$ClusterPlot)
SFCMMaps <- mapClusters(geodata = loco, object = SFCM$Belongings,undecided = 0.45)
SGFCMMaps <- mapClusters(geodata = loco, object = SGFCM$Belongings,undecided = 0.45)
SFCMMaps <- mapClusters(geodata = loco, object = SFCM$Belongings,undecided = 0.10)
SGFCMMaps <- mapClusters(geodata = loco, object = SGFCM$Belongings,undecided = 0.10)
tmap_arrange(SFCMMaps$ProbaMaps[[1]],SGFCMMaps$ProbaMaps[[1]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[2]],SGFCMMaps$ProbaMaps[[2]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[3]],SGFCMMaps$ProbaMaps[[3]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[4]],SGFCMMaps$ProbaMaps[[4]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ClusterPlot,SGFCMMaps$ClusterPlot, nrow = 1, ncol = 2)
SFCMMaps <- mapClusters(geodata = loco, object = SFCM$Belongings,undecided = 0.90)
SGFCMMaps <- mapClusters(geodata = loco, object = SGFCM$Belongings,undecided = 0.90)
tmap_arrange(SFCMMaps$ProbaMaps[[1]],SGFCMMaps$ProbaMaps[[1]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[2]],SGFCMMaps$ProbaMaps[[2]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[3]],SGFCMMaps$ProbaMaps[[3]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ProbaMaps[[4]],SGFCMMaps$ProbaMaps[[4]], nrow = 1, ncol = 2)
tmap_arrange(SFCMMaps$ClusterPlot,SGFCMMaps$ClusterPlot, nrow = 1, ncol = 2)
spdiag_1 <- spatialDiag(Cmean$Belongings, nblistw = WMat, nrep=250)
spdiag_2 <- spatialDiag(GCmean$Belongings, nblistw = WMat, nrep=250)
spdiag_3 <- spatialDiag(SFCM$Belongings, nblistw = WMat, nrep=250)
spdiag_4 <- spatialDiag(SGFCM$Belongings, nblistw = WMat, nrep=250)
#looking at the moran I values for each group
moran_table <- data.frame(cbind(spdiag_1$MoranValues$MoranI,
spdiag_2$MoranValues$MoranI,
spdiag_3$MoranValues$MoranI,
spdiag_4$MoranValues$MoranI
))
row.names(moran_table) <- paste("cluster ",1:4,sep="")
knitr::kable(moran_table, digits = 3,
col.names = c("FCM","GFCM","SFCM","SGFCM"),
caption = "Moran I index for the columns of the membership matrix"
)
print(c(spdiag_1$SpConsist, spdiag_2$SpConsist,spdiag_3$SpConsist,spdiag_4$SpConsist))
sum(spdiag_4$SpConsist > spdiag_3$SpConsistSamples) / length(spdiag_3$SpConsistSamples)
Undecided <- undecidedUnits(SGFCM$Belongings,0.45)
loco$FinalCluster <- ifelse(Undecided=="Undecided",
"Undecided",paste("cluster",Undecided,sep="_"))
# mapping the groups
tm_shape(loco) +
tm_fill("FinalCluster", palette = c("cluster_V1"="palegreen3",
"cluster_V2"="firebrick",
"cluster_V3"="lightyellow2",
"cluster_V4"="steelblue",
"cluster_V5"="pink",
"Undecided"=rgb(0,0,0,0.4))) +
tm_borders("black") +
tm_layout(frame = FALSE, legend.outside = TRUE)
tm_shape(loco)
tm_shape(loco) +
tm_dots()
tm_shape(loco) +
tm_dots("FinalCluster", palette = c("cluster_V1"="palegreen3",
"cluster_V2"="firebrick",
"cluster_V3"="orange",
"cluster_V4"="steelblue",
"cluster_V5"="pink",
"Undecided"=rgb(0,0,0,0.4)))
tm_shape(loco) +
tm_dots("FinalCluster", palette = c("cluster_V1"="palegreen3",
"cluster_V2"="firebrick",
"cluster_V3"="orange",
"cluster_V4"="steelblue",
"cluster_V5"="pink",
"Undecided"=rgb(0,0,0,0.4)), size = 1) +
tm_layout(legend.outside = TRUE, frame = FALSE)
View(loco)
colors <- c("palegreen3","firebrick","lightyellow2","steelblue","pink")
uncertaintyMap(loco, SGFCM$Belongings, color = colors)
loco$entropyidx  <- calcUncertaintyIndex(SGFCM$Belongings)
# mapping the uncertainty
tm_shape(loco) +
tm_dots("entropyidx", palette = "Greys", style = "cont") +
tm_borders("black") +
tm_layout(frame = FALSE, legend.outside = TRUE)
# mapping the uncertainty
tm_shape(loco) +
tm_dots("entropyidx", palette = "Greys", style = "cont") +
tm_layout(frame = FALSE, legend.outside = TRUE)
# mapping the uncertainty
tm_shape(loco) +
tm_dots("entropyidx", palette = "Greys", style = "cont", size = 1) +
tm_layout(frame = FALSE, legend.outside = TRUE)
setwd("C:/Curso/Coberturas")
getwd()
setwd("C:/Curso/Coberturas")
getwd()
library(geocmeans)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(spdep)
library(tmap)
library(sf)
library(shapefiles)
P200 <- st_read("Puntos_200.shp")
View(P200)
p200 <- st_read("Puntos_200.shp")
rm(P200)
class(p200)
data <- p200
spdep::set.mcOption(FALSE)
spdep::set.coresOption(1L)
tm_shape(p200) +
tm_dots()
tm_shape(p200) +
tm_dots(size = 1)
tm_shape(p200) +
tm_dots(size = 0.5)
tm_shape(p200) +
tm_dots(size = 0.5)
tm_shape(p200) +
tm_dots(size = 0.1)
tm_shape(p200) +
tm_dots(size = 0.05)
tm_shape(p200) +
tm_dots(size = 0.06)
tm_shape(p200) +
tm_dots(size = 0.08)
p200 <- st_read("Puntos_200a.shp")
p200a <- st_read("Puntos_200a.shp")
class(p200a)
data <- p200a
spdep::set.mcOption(FALSE)
spdep::set.coresOption(1L)
# Seleccionando las columnas para el analisis:
names(dta)
# Seleccionando las columnas para el analisis:
names(data)
AnalysisFields <-c("Total.Catc","Topographi","Relative.S","Profile.Cu","Plan.Curva",
"Convergenc","Co_pend_20","Co_MDE_uw1")
Data <- sf::st_drop_geometry(p200a[AnalysisFields])
View(Data)
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
data <- na.omit(data)
spdep::set.mcOption(FALSE)
spdep::set.coresOption(1L)
# Seleccionando las columnas para el analisis:
names(data)
AnalysisFields <-c("Total.Catc","Topographi","Relative.S","Profile.Cu","Plan.Curva",
"Convergenc","Co_pend_20","Co_MDE_uw1")
Data <- sf::st_drop_geometry(p200a[AnalysisFields])
for (Col in names(Data)){
Data[[Col]] <- scale(Data[[Col]])
}
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
summary(data)
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
library(geocmeans)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(spdep)
library(tmap)
library(sf)
library(shapefiles)
p200a <- st_read("Puntos_200a.shp")
class(p200a)
data <- p200a
data <- na.omit(data)
summary(data)
spdep::set.mcOption(FALSE)
spdep::set.coresOption(1L)
# Seleccionando las columnas para el analisis:
names(data)
AnalysisFields <-c("Total.Catc","Topographi","Relative.S","Profile.Cu","Plan.Curva",
"Convergenc","Co_pend_20","Co_MDE_uw1")
Data <- sf::st_drop_geometry(p200a[AnalysisFields])
for (Col in names(Data)){
Data[[Col]] <- scale(Data[[Col]])
}
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
Df <- data.frame(K=2:10, R2 = R2s)
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 3150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
View(Data)
p200a <- st_read("Puntos_200a.shp")
class(p200a)
p200a <- na.omit(p200a)
data <- p200a
summary(data)
spdep::set.mcOption(FALSE)
spdep::set.coresOption(1L)
# Seleccionando las columnas para el analisis:
names(data)
AnalysisFields <-c("Total.Catc","Topographi","Relative.S","Profile.Cu","Plan.Curva",
"Convergenc","Co_pend_20","Co_MDE_uw1")
Data <- sf::st_drop_geometry(p200a[AnalysisFields])
for (Col in names(Data)){
Data[[Col]] <- scale(Data[[Col]])
}
R2s <- sapply(2:10,function(k){
Clust <- kmeans(Data,centers=k,iter.max = 150)
R2 <- Clust$betweenss / Clust$totss
return(R2)
})
Df <- data.frame(K=2:10, R2 = R2s)
ggplot(Df)+
geom_line(aes(x=K,y=R2s), color="blue")+
geom_point(aes(x=K,y=R2s),color="red")+
xlab("Number of groups")+
ylab("R2 of classification")
KMeanClust <-  kmeans(Data,centers=4,iter.max = 150)
p200a$Cluster <-paste("cluster",KMeanClust$cluster,sep="_")
tm_shape(p200a) +
tm_dots(size = 0.08)
tm_shape(p200a) +
tm_shape(p200a) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue")) +
tm_layout(legend.outside = TRUE, frame = FALSE)
View(p200a)
tm_shape(p200a) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue")) +
tm_layout(legend.outside = TRUE, frame = FALSE)
tm_shape(p200a) +
tm_dots("Cluster", palette = c("cluster_1"="palegreen3",
"cluster_2"="firebrick",
"cluster_3"="orange",
"cluster_4"="steelblue"), size = 0.08) +
tm_layout(legend.outside = TRUE, frame = FALSE)
